generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
    ARTIST
    CURATOR
}

model User {
    id                       String              @id @default(cuid())
    name                     String?
    email                    String?             @unique
    emailVerified            DateTime?
    image                    String?
    password                 String? // Campo para contraseñas hasheadas
    role                     UserRole            @default(USER)
    accounts                 Account[]
    sessions                 Session[]
    settings                 Json?
    salasPropias             Sala[]              @relation("SalaOwner")
    salasColabora            SalaColaborador[]
    pushSubscriptions        PushSubscription[]
    artist                   Artist? // Relación opcional con Artist
    favoritedBy              UserMuralFavorite[]
    verificationToken        String?
    verificationTokenExpires DateTime?
    subscriptions            Subscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Mural {
    id          Int     @id @default(autoincrement())
    titulo      String
    autor       String? // Campo legacy para compatibilidad
    tecnica     String?
    descripcion String?
    anio        Int?
    url_imagen  String?
    latitud     Float? // Coordenada de latitud
    longitud    Float? // Coordenada de longitud
    ubicacion   String? // Dirección o descripción de ubicación

    // Relaciones
    salas       SalaMural[]
    artistId    String? // ID del artista (opcional)
    artist      Artist?             @relation(fields: [artistId], references: [id])
    favoritedBy UserMuralFavorite[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([titulo])
}

model Sala {
    id               Int               @id @default(autoincrement())
    nombre           String
    descripcion      String?
    publica          Boolean           @default(false)
    esPrivada        Boolean?          @default(false)
    color            String?
    texturaPared     String?
    texturaPiso      String?
    musica           String?
    imagenPortada    String?
    tema             String?
    maxColaboradores Int?
    fechaApertura    DateTime?
    notas            String?
    creadorId        String
    creador          User              @relation("SalaOwner", fields: [creadorId], references: [id])
    murales          SalaMural[]
    colaboradores    SalaColaborador[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model SalaMural {
    id      Int   @id @default(autoincrement())
    sala    Sala  @relation(fields: [salaId], references: [id])
    salaId  Int
    mural   Mural @relation(fields: [muralId], references: [id])
    muralId Int

    @@unique([salaId, muralId])
}

model UserMuralFavorite {
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    mural   Mural    @relation(fields: [muralId], references: [id], onDelete: Cascade)
    muralId Int
    addedAt DateTime @default(now())

    @@id([userId, muralId])
    @@map("user_mural_favorites")
}

model PushSubscription {
    id        String   @id @default(cuid())
    endpoint  String   @unique
    p256dh    String
    auth      String
    userId    String? // Ahora opcional
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    keys      Json? // Opcional, para guardar el objeto completo de keys si lo necesitas
    createdAt DateTime @default(now())

    @@index([userId])
}

model SalaColaborador {
    id        Int      @id @default(autoincrement())
    sala      Sala     @relation(fields: [salaId], references: [id])
    salaId    Int
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    rol       String // Ejemplo: "colaborador", "curador"
    createdAt DateTime @default(now())

    @@unique([salaId, userId])
}

model Artist {
    id     String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Información del artista
    bio       String? // Biografía del artista
    website   String? // Sitio web personal
    instagram String? // Instagram
    twitter   String? // Twitter/X
    facebook  String? // Facebook

    // Información profesional
    especialidad String? // Técnica o estilo principal
    experiencia  String? // Años de experiencia
    formacion    String? // Formación académica

    // Información adicional
    premios       String? // Premios y reconocimientos
    exposiciones  String? // Exposiciones importantes
    publicaciones String? // Publicaciones o catálogos

    // Relaciones
    murales Mural[] // Murales creados por este artista

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscription {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    type      String // 'sala', 'obra', o 'all' para suscripción global
    createdAt DateTime @default(now())

    @@unique([userId, type])
}
