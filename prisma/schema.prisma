// Prisma schema for Museo 3D
// Adjust the datasource url as needed

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Example model
model User {
    id            Int                 @id @default(autoincrement())
    email         String              @unique
    password      String? // Nullable para usuarios OAuth
    name          String? // Nombre del usuario
    image         String? // URL de imagen del usuario
    emailVerified DateTime? // Para NextAuth
    creadoEn      DateTime            @default(now())
    role          String              @default("user")
    provider      String? // OAuth provider
    salasPropias  Sala[]              @relation("SalaOwner")
    salasColabora Sala[]              @relation("SalaColaboradores")
    settings      UserSetting[]
    roles         UserRole[]
    collection    PersonalCollection?
}

model Mural {
    id            Int     @id @default(autoincrement())
    nombre        String
    autor         String? // Puede ser nulo
    colaboradores String? // Puede ser nulo
    tecnica       String
    medidas       String? // Puede ser nulo
    anio          Int
    ubicacion     String
    url_imagen    String
    salaId        Int?
    sala          Sala?   @relation(fields: [salaId], references: [id])
}

model Sala {
    id            Int     @id @default(autoincrement())
    nombre        String
    ownerId       Int
    owner         User    @relation("SalaOwner", fields: [ownerId], references: [id])
    colaboradores User[]  @relation("SalaColaboradores")
    murales       Mural[]
}

// Configuraciones de usuario (clave-valor)
model UserSetting {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, key])
}

// Roles disponibles
model Role {
    id    Int        @id @default(autoincrement())
    name  String     @unique
    users UserRole[]
}

// Relación muchos a muchos entre User y Role
model UserRole {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    role       Role     @relation(fields: [roleId], references: [id])
    roleId     Int
    assignedAt DateTime @default(now())

    @@unique([userId, roleId])
}

// Colección personal de cada usuario
model PersonalCollection {
    id        String   @id @default(uuid())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    data      Json // Array de objetos de la colección
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@unique([userId])
}
